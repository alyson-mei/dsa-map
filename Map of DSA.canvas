{
	"nodes":[
		{"id":"4d3f2c23eedb59ef","type":"group","x":-2240,"y":320,"width":1540,"height":1480,"label":"Global CRUD"},
		{"id":"79f1928828b930cd","type":"group","x":-1480,"y":2440,"width":1780,"height":1220,"label":"Algorithms"},
		{"id":"f02a160e094281b5","type":"group","x":-2680,"y":-560,"width":1400,"height":814,"label":"Definition and implementation"},
		{"id":"4f159f671d3e6fb6","type":"group","x":-2190,"y":760,"width":670,"height":1000,"label":"Update / Delete"},
		{"id":"6aa690f2b524dda5","type":"group","x":-3280,"y":320,"width":980,"height":620,"label":"Local CRUD"},
		{"id":"96a6e6e558c80c91","type":"group","x":-1440,"y":500,"width":680,"height":834,"label":"Read / Aggregate / Filter / etc."},
		{"id":"a6ecb3cb0c7025b6","type":"group","x":-1440,"y":2500,"width":628,"height":340,"label":"Basic algorithms"},
		{"id":"19c50a914f307417","type":"group","x":-2190,"y":386,"width":670,"height":314,"label":"Create"},
		{"id":"b59286bfd7dea154","type":"text","text":"### Two pointers\n\n1\\. Valid palindrome\n2\\. Maximums subarray sum (Kadane's algorithm)","x":-2160,"y":2520,"width":580,"height":440},
		{"id":"ce9a180332abed35","type":"text","text":"### Tuple","x":1690,"y":-320,"width":250,"height":60},
		{"id":"b84e8ad8edb48fe4","type":"text","text":"### Set","x":2049,"y":-320,"width":250,"height":60},
		{"id":"11005d1913a0d8b1","type":"text","text":"### Hashmap","x":2440,"y":-320,"width":250,"height":60},
		{"id":"213c57472ff05455","type":"text","text":"### String","x":1320,"y":-320,"width":250,"height":60},
		{"id":"b092bb7521a909c1","type":"text","text":"#### Sorting\n1) Quadratic\n\t- [[Selection sort]]\n\t- [[Insertion sort]]\n\t- [[Bubble sort]]\n2) Quasilinear\n\t- [[Merge sort]]\n\t- [[Quicksort]]","x":-1420,"y":2520,"width":280,"height":280},
		{"id":"d3236cbe9239b76e","type":"text","text":"#### Search\n- [[Linear search]]\n- [[Binary search]]\n- [[Jump search]]\n- [[Bound binary search]]","x":-1100,"y":2520,"width":268,"height":220},
		{"id":"82b5962b624f4054","type":"text","text":"## Array\n\n- **Тип**: `type(array)` -> smth like `Array<Int>`\n- **Длина**: `len(array)`\n\n**Предполагаем**:\n- Динамичность по запросу\n- Тип Any по умолчанию\n- Заполнен некоторыми значениями при создании","x":-2660,"y":-532,"width":500,"height":293,"color":"6"},
		{"id":"44e18d46d0d7b999","type":"text","text":"#### Реализация\n\nНепрерывный блок памяти, в котором хранятся\na) объекты одного размера (для статических массивов)\nб) указатели на объекты (для динамических массивов)\n\n**Статический массив(C style)**\n`int arr[5] = {1, 2, 3, 4, 5};`\n\n**Динамический массив (\"Vector\", Python list, Java ArrayList)**\nРеализуется как:\n\n- Буфер (array) – выделенный блок памяти определённой ёмкости.\n    \n- Размер (size) – фактическое количество элементов.\n    \n- Ёмкость (capacity) – сколько элементов может влезть без перевыделения.\n    \n\nКогда массив заполняется:\n\n1. Выделяется новый блок памяти (обычно увеличенный в 1.5–2 раза).\n    \n2. Старые элементы копируются ($O(n)$).\n    \n3. Новый элемент добавляется.","x":-2110,"y":-532,"width":780,"height":713},
		{"id":"f078e6654b31e566","type":"text","text":"#### List comprehension\n\n```python\narr = [elmnt for elmnt in iterable if condition(iterable)]\n```","x":-2170,"y":406,"width":350,"height":154},
		{"id":"b191ab69fbf36255","type":"text","text":"#### Reverse\n- `array.reverse()`\n\n$O(n)$","x":-2149,"y":786,"width":240,"height":154},
		{"id":"2a1f1806bfbdce98","type":"text","text":"#### Shift\n```python\narr.append(None)\nfor i in range(len(arr)-2, -1, -1):\n\tarr[i+1] = arr[i]\n```\n$O(n)$","x":-2149,"y":960,"width":573,"height":200},
		{"id":"b5966777f4aa3896","type":"text","text":"#### Map\n`arr = list(map(int, input().split()))`","x":-2170,"y":580,"width":594,"height":100},
		{"id":"7905b62cddb4d4d2","type":"text","text":"#### Clear and Del\n- `array.clear()` | $O(n)$\n- `del array` | $O(1)$","x":-1889,"y":786,"width":313,"height":154},
		{"id":"72a7a8461b6fbd4d","type":"text","text":"#### Поиск\n- `elmnt in arr`\n- `arr.index()` - исключение, если нет элемента\n- `arr.count(elmnt)` - подсчёт количества вхождений\n\n$O(n)$\n\n\\+ bisect - для бинарного поиска: $O(nlogn)$","x":-1420,"y":520,"width":640,"height":254},
		{"id":"be51c1c38eb3c224","type":"text","text":"#### Агрегация\n\n- `sum(arr)` \n- `min(arr)`, `max(arr)`\n- `all(lst)`, `any(lst)` - конъюнкция/дизъюнкция\n\n```python\nimport statistics\nstatistics.mean(lst)   \nstatistics.median(lst)   \nstatistics.mode(lst)   \nstatistics.stdev(lst)\n\n```","x":-1420,"y":794,"width":640,"height":323},
		{"id":"fe1824679faa31ac","type":"text","text":"#### Фильтрация\n\n-  `[x for x in lst if cond(x)]` (отдельно для целей фильтрации)\n- `filter(cond, lst)`","x":-1420,"y":1134,"width":640,"height":160},
		{"id":"84696f3096501891","type":"text","text":"#### Sorting\n\n- `arr.sort(reverse, key)`\n- `new_arr = sorted(arr, reverse, key)`\n\n**Сортировки** (по умолчанию non-decreasing order):\n1. Квадратичные $(O(n^2))$\n\t- Выбором: находим минимальный элемент, меняем его с первым из неотсортированной части\n\t- Вставками: размещаем новый элемент в правильное место в отсортированной части\n\t- Пузырьком: *цепляем* максимальный элемент неотсортированной части, переносим в конец\n2. Квазилинейная $(O(nlogn))$\n\t- Merge sort (слиянием): массив разбивается на две части, каждая сортируется отдельно, \n\t- Quicksort (\"быстрая\")","x":-2149,"y":1180,"width":573,"height":560},
		{"id":"e6aa1ea649c5dc75","type":"text","text":"#### Concatenation\n- `arr1 + arr2`\n\n$O(\\textrm{len}(\\textrm{arr2}))$","x":-1800,"y":406,"width":230,"height":154},
		{"id":"f9ded7ac3a07b0d4","type":"text","text":"#### Доступ по индексу (read/update)\n- `x = arr[i]` | `0 <= i < len(arr)`\n- `arr[i] = 17` | `0 <= i < len(arr)`\n\n**Замечание**:\n- Можно использовать отрицательные (syntactic sugar)\n\n$O(1)$","x":-3260,"y":340,"width":400,"height":280},
		{"id":"3ab0bcbe9839b995","type":"text","text":"#### Итерирование\n```python\nfor i in range(start, stop, step):\n\t...\nfor elmnt in arr:\n\t...\n```\n\n$O(n)$","x":-3260,"y":640,"width":400,"height":240},
		{"id":"1b0a3f2961c3a69a","type":"text","text":"#### Добавление/удаление (create/delete)\n\n- `arr.append(elmnt)`\n- `x = arr.pop()` | `len(arr) > 0`\n- `arr.insert(pos, elmnt)`\n- `arr.pop(pos)` | `0 <= i < len(arr)`\n\n$O(1)$ в конец, $O(n)$ в общем случае","x":-2820,"y":340,"width":500,"height":280}
	],
	"edges":[
		{"id":"dd850a81b9e6daa7","fromNode":"f9ded7ac3a07b0d4","fromSide":"bottom","toNode":"3ab0bcbe9839b995","toSide":"top"}
	]
}