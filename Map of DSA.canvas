{
	"nodes":[
		{"id":"30c41d80592b44e8","type":"group","x":-3760,"y":-840,"width":2680,"height":2520,"label":"Arrays (and array-like DS)"},
		{"id":"4d3f2c23eedb59ef","type":"group","x":-2680,"y":140,"width":1540,"height":1480,"label":"Global CRUD"},
		{"id":"f02a160e094281b5","type":"group","x":-3720,"y":-760,"width":2580,"height":840,"label":"Definition and implementation"},
		{"id":"cf14f2fa1bb1d26b","type":"group","x":-920,"y":-840,"width":1280,"height":1520,"label":"Hash-based DS"},
		{"id":"79f1928828b930cd","type":"group","x":-3320,"y":2040,"width":2360,"height":760,"label":"Algorithms: Arrays"},
		{"id":"41ba00db0b6cc136","type":"group","x":-880,"y":2040,"width":1340,"height":800,"label":"Algorithms: Set & Dict"},
		{"id":"3265595402f90c17","type":"group","x":-3720,"y":820,"width":960,"height":840,"label":"String and tuple methods"},
		{"id":"2a94b59a164c0ba3","type":"group","x":-2499,"y":2120,"width":1479,"height":480,"label":"Patterns: Arrays"},
		{"id":"4f159f671d3e6fb6","type":"group","x":-2630,"y":580,"width":670,"height":1000,"label":"Update / Delete"},
		{"id":"6aa690f2b524dda5","type":"group","x":-3720,"y":140,"width":980,"height":620,"label":"Local CRUD"},
		{"id":"96a6e6e558c80c91","type":"group","x":-1880,"y":320,"width":680,"height":834,"label":"Read / Aggregate / Filter / etc."},
		{"id":"a6ecb3cb0c7025b6","type":"group","x":-3280,"y":2120,"width":720,"height":340,"label":"Basic classes: Arrays"},
		{"id":"19c50a914f307417","type":"group","x":-2630,"y":206,"width":670,"height":314,"label":"Create"},
		{"id":"633aa69370a5f45f","type":"group","x":-3280,"y":2520,"width":500,"height":240,"label":"Other: Arrays"},
		{"id":"08c132222f23920a","type":"text","text":"### Sliding window\n\n","x":-1660,"y":2140,"width":600,"height":440},
		{"id":"f5b57f663f61f148","type":"text","text":"### Dict\n\n- Basic\n\t1) [Two Sum](https://leetcode.com/problems/two-sum/) (LC 1)\n\t2)  [First Unique Character in a String](https://leetcode.com/problems/first-unique-character-in-a-string/) (LC 387)\n\t3) [Unique Number of Occurrences](https://leetcode.com/problems/unique-number-of-occurrences/) (LC 1207)\n\t4) [Contains Duplicate II](https://leetcode.com/problems/contains-duplicate-ii/) (LC 219)\n\t5) [Ransom Note](https://leetcode.com/problems/ransom-note/) (LC 383)\n\t6) [Sort Characters By Frequency](https://leetcode.com/problems/sort-characters-by-frequency/) (LC 451)\n\t<br>\n- Intermediate\n\t1) [Group Anagrams](https://leetcode.com/problems/group-anagrams/) (LC 49)","x":-360,"y":2080,"width":520,"height":460},
		{"id":"7fced196745814a3","type":"text","text":"### Set\n- Basic\n\t1) [Contains duplicate](https://leetcode.com/problems/contains-duplicate/) (LC 217)\n\t2) [Intersection of Two Arrays](https://leetcode.com/problems/intersection-of-two-arrays/description/) (LC 349)\n\t3) [Valid Anagram](https://leetcode.com/problems/valid-anagram/description/) (LC 242)\n\t<br>\n- Intermediate\n\t1) [Longest Substring Without Repeating Characters](https://leetcode.com/problems/longest-substring-without-repeating-characters/) (LC 3)","x":-820,"y":2080,"width":440,"height":380},
		{"id":"b59286bfd7dea154","type":"text","text":"### Two pointers\n\n- Basic\n\t1) [Reverse String](https://leetcode.com/problems/reverse-string/description/) (LC 344)\n\t2) [Sort array by parity](https://leetcode.com/problems/sort-array-by-parity/description/) (LC 905)\n\t3) [Remove duplicates](https://leetcode.com/problems/remove-duplicates-from-sorted-array/) (LC 26)\n\t4) [Move zeroes](https://leetcode.com/problems/move-zeroes/description/) (LC 283)\n\t5) [Merge sorted arrays](https://leetcode.com/problems/merge-sorted-array/description/) (LC 88, closer to intermediate for in-place version) \n\t<br>\n- Intermediate \n\t1) ==[Sort colors](https://leetcode.com/problems/sort-colors/) (LC 75, Dutch National Flag algorithm)==\n\t2) [Two sum in a sorted array](https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/) (LC 167)\n\t3) [Number of Subsequences That Satisfy the Given Sum Condition](https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/) (LC 1498)","x":-2479,"y":2140,"width":720,"height":440},
		{"id":"84696f3096501891","type":"text","text":"#### Sorting\n\n- `arr.sort(reverse, key)`\n- `new_arr = sorted(arr, reverse, key)`\n\n**Сортировки** (по умолчанию non-decreasing order):\n1. Квадратичные $(O(n^2))$\n\t- Выбором: находим минимальный элемент, меняем его с первым из неотсортированной части\n\t- Вставками: размещаем новый элемент в правильное место в отсортированной части\n\t- Пузырьком: *цепляем* максимальный элемент неотсортированной части, переносим в конец\n2. Квазилинейная $(O(nlogn))$\n\t- Merge sort (слиянием): массив разбивается на две части, каждая сортируется отдельно, \n\t- Quicksort (\"быстрая\")","x":-2589,"y":1000,"width":573,"height":560},
		{"id":"fe1824679faa31ac","type":"text","text":"#### Фильтрация\n\n-  `[x for x in lst if cond(x)]` (отдельно для целей фильтрации)\n- `filter(cond, lst)`","x":-1860,"y":954,"width":640,"height":160},
		{"id":"2a1f1806bfbdce98","type":"text","text":"#### Shift\n```python\narr.append(None)\nfor i in range(len(arr)-2, -1, -1):\n\tarr[i+1] = arr[i]\n```\n$O(n)$","x":-2589,"y":780,"width":573,"height":200},
		{"id":"be51c1c38eb3c224","type":"text","text":"#### Агрегация\n\n- `sum(arr)` \n- `min(arr)`, `max(arr)`\n- `all(lst)`, `any(lst)` - конъюнкция/дизъюнкция\n\n```python\nimport statistics\nstatistics.mean(lst)   \nstatistics.median(lst)   \nstatistics.mode(lst)   \nstatistics.stdev(lst)\n\n```","x":-1860,"y":614,"width":640,"height":323},
		{"id":"7905b62cddb4d4d2","type":"text","text":"#### Clear and Del\n- `array.clear()` | $O(n)$\n- `del array` | $O(1)$","x":-2329,"y":606,"width":313,"height":154},
		{"id":"72a7a8461b6fbd4d","type":"text","text":"#### Поиск\n- `elmnt in arr`\n- `arr.index()` - исключение, если нет элемента\n- `arr.count(elmnt)` - подсчёт количества вхождений\n\n$O(n)$\n\n\\+ bisect - для бинарного поиска: $O(nlogn)$","x":-1860,"y":340,"width":640,"height":254},
		{"id":"b5966777f4aa3896","type":"text","text":"#### Map\n`arr = list(map(int, input().split()))`","x":-2610,"y":400,"width":594,"height":100},
		{"id":"f078e6654b31e566","type":"text","text":"#### List comprehension\n\n```python\narr = [elmnt for elmnt in iterable if condition(iterable)]\n```","x":-2610,"y":226,"width":350,"height":154},
		{"id":"e6aa1ea649c5dc75","type":"text","text":"#### Concatenation\n- `arr1 + arr2`\n\n$O(\\textrm{len}(\\textrm{arr2}))$","x":-2240,"y":226,"width":230,"height":154},
		{"id":"d3236cbe9239b76e","type":"text","text":"#### Search\n- [[Linear search]]\n- [[Binary search]]\n- ==[[Jump search]]==\n- [[Bound binary search]]","x":-2940,"y":2140,"width":268,"height":220},
		{"id":"d6b2b253f95f8432","type":"text","text":"- Intermediate\n\t1) [Maximums subarray](https://leetcode.com/problems/maximum-subarray/) (Kadane's algorithm)","x":-3260,"y":2540,"width":460,"height":180},
		{"id":"b092bb7521a909c1","type":"text","text":"#### Sorting\n- Quadratic\n\t1) [[Selection sort]]\n\t2) [[Insertion sort]]\n\t3) [[Bubble sort]]\n- Quasilinear\n\t1) [[Merge sort]]\n\t2) ==[[Quicksort]]==","x":-3260,"y":2140,"width":280,"height":280},
		{"id":"c7b550e6a92b91b5","type":"text","text":"### Tuple methods\n`count(x)`, `index(x[, start[, stop]])`","x":-3700,"y":1280,"width":920,"height":340},
		{"id":"525d746a243adbd0","type":"text","text":"### String methods\n \n **Преобразование регистра**\n\n| Метод        | Описание                                           |\n|--------------|----------------------------------------------------|\n| lower()      | Преобразует все символы в нижний регистр           |\n| upper()      | Преобразует все символы в верхний регистр          |\n| capitalize() | Первая буква — заглавная, остальные — строчные     |\n| title()      | Каждое слово с заглавной буквы                     |\n| swapcase()   | Меняет регистр всех букв на противоположный       |\n| casefold()   | Агрессивное понижение регистра для сравнения       |\n\n**Проверка свойств**\n\n| Метод           | Описание                                       |\n|------------------|------------------------------------------------|\n| isalpha()        | Состоит только из букв                         |\n| isdigit()        | Состоит только из цифр                         |\n| isalnum()        | Состоит только из букв и цифр                  |\n| isdecimal()      | Состоит из десятичных цифр                     |\n| isnumeric()      | Состоит из любых числовых символов            |\n| islower()        | Все буквы в нижнем регистре                   |\n| isupper()        | Все буквы в верхнем регистре                  |\n| istitle()        | Каждое слово начинается с заглавной буквы     |\n| isspace()        | Содержит только пробельные символы            |\n| isascii()        | Содержит только ASCII-символы                 |\n| isidentifier()   | Корректный Python-идентификатор               |\n| isprintable()    | Все символы — печатные                        |\n **Поиск и счёт**\n\n| Метод                           | Описание                                                   |\n|----------------------------------|-------------------------------------------------------------|\n| find(sub[, start[, end]])       | Индекс первого вхождения подстроки, либо -1                |\n| rfind(sub[, start[, end]])      | Индекс последнего вхождения подстроки, либо -1             |\n| index(sub[, start[, end]])      | Как find, но вызывает ошибку, если не найдено              |\n| rindex(sub[, start[, end]])     | Как rfind, но вызывает ошибку, если не найдено             |\n| count(sub[, start[, end]])      | Считает количество вхождений подстроки                     |\n| startswith(prefix[, start[, end]]) | Проверка начала строки                                |\n| endswith(suffix[, start[, end]])  | Проверка конца строки                                 |\n\n **Изменение/замена**\n\n| Метод                        | Описание                                                  |\n|------------------------------|------------------------------------------------------------|\n| replace(old, new[, count])   | Замена подстроки                                          |\n| strip([chars])               | Удаление пробелов/символов с обоих концов                |\n| lstrip([chars])              | Удаление с левого конца                                  |\n| rstrip([chars])              | Удаление с правого конца                                 |\n| removeprefix(prefix)         | Удаляет префикс (Python 3.9+)                            |\n| removesuffix(suffix)         | Удаляет суффикс (Python 3.9+)                            |\n| translate(table)             | Заменяет символы по таблице перевода                    |\n| expandtabs(tabsize=8)        | Преобразует табуляции в пробелы                          |\n| zfill(width)                 | Добавляет ведущие нули                                   |\n| center(width[, fillchar])    | Центрирует строку                                        |\n| ljust(width[, fillchar])     | Выровнять по левому краю                                 |\n| rjust(width[, fillchar])     | Выровнять по правому краю                                |\n\n**Разделение и объединение**\n\n| Метод                              | Описание                                            |\n|------------------------------------|-----------------------------------------------------|\n| split(sep=None, maxsplit=-1)       | Разбивает строку на части                          |\n| rsplit(sep=None, maxsplit=-1)      | Как split, но справа                               |\n| partition(sep)                     | Разбивает на 3 части: до, разделитель, после       |\n| rpartition(sep)                    | Как partition, но справа                           |\n| splitlines(keepends=False)         | Разбивает по строкам                               |\n| join(iterable)                     | Объединяет строки из итерируемого объекта          |\n\n**Форматирование и кодировка**\n\n| Метод                        | Описание                                                  |\n|------------------------------|------------------------------------------------------------|\n| format(*args, **kwargs)      | Форматирование строки                                     |\n| format_map(mapping)          | Форматирование по словарю                                 |\n| encode(encoding='utf-8')     | Преобразует в байты                                       |\n| maketrans(x[, y[, z]])       | Создает таблицу перевода символов                         |\n","x":-3700,"y":840,"width":920,"height":400},
		{"id":"b191ab69fbf36255","type":"text","text":"#### Reverse\n- `array.reverse()`\n\n$O(n)$","x":-2589,"y":606,"width":240,"height":154},
		{"id":"f9ded7ac3a07b0d4","type":"text","text":"#### Доступ по индексу (read/update)\n- `x = arr[i]` | `0 <= i < len(arr)`\n- `arr[i] = 17` | `0 <= i < len(arr)`\n\n**Замечание**:\n- Можно использовать отрицательные (syntactic sugar)\n\n$O(1)$","x":-3700,"y":160,"width":400,"height":280},
		{"id":"3ab0bcbe9839b995","type":"text","text":"#### Итерирование\n```python\nfor i in range(start, stop, step):\n\t...\nfor elmnt in arr:\n\t...\n```\n\n$O(n)$","x":-3700,"y":460,"width":400,"height":260},
		{"id":"1b0a3f2961c3a69a","type":"text","text":"#### Добавление/удаление (create/delete)\n\n- `arr.append(elmnt)`\n- `x = arr.pop()` | `len(arr) > 0`\n- `arr.insert(pos, elmnt)`\n- `arr.pop(pos)` | `0 <= i < len(arr)`\n\n$O(1)$ в конец, $O(n)$ в общем случае","x":-3260,"y":160,"width":500,"height":280},
		{"id":"213c57472ff05455","type":"text","text":"### String\n\nМассив байтов с завершающим `\\0` или с дополнительной метаинформацией\n```c\n// Массив симвоболов (char[]) с \\0 в конце\nchar *s = \"hello\";\n```\n```python \n# Реализация CPython хранит строку в виде структуры PyUnicodeObject\ns = \"hello\"\n```\n\nОтличия: \n- Тип элементов - символы (чаще всего `char`)\n- Неизменяемость\n- Специальная семантика (поддержка конкатенации, поиска и т.п.)\n- Оптимизации в компиляторах/интерпретаторах\n\nВ Python реализуют метод `__hash__`, всегда хэшируемые","x":-2040,"y":-732,"width":735,"height":772},
		{"id":"44e18d46d0d7b999","type":"text","text":"### Array\n\n- **Тип**: `type(array)` -> smth like `Array<Int>`\n- **Длина**: `len(array)`\n\n**Предполагаем**:\n- Динамичность по запросу\n- Тип Any по умолчанию\n- Заполнен некоторыми значениями при создании\n\n#### Реализация\n\nНепрерывный блок памяти, в котором хранятся\na) объекты одного размера (для статических массивов)\nб) указатели на объекты (для динамических массивов)\n\n**Статический массив(C style)**\n`int arr[5] = {1, 2, 3, 4, 5};`\n\n**Динамический массив (\"Vector\", Python list, Java ArrayList)**\nРеализуется как:\n\n- Буфер (array) – выделенный блок памяти определённой ёмкости.\n    \n- Размер (size) – фактическое количество элементов.\n    \n- Ёмкость (capacity) – сколько элементов может влезть без перевыделения.\n    \n\nКогда массив заполняется:\n\n1. Выделяется новый блок памяти (обычно увеличенный в 1.5–2 раза).\n    \n2. Старые элементы копируются ($O(n)$).\n    \n3. Новый элемент добавляется.","x":-3680,"y":-732,"width":780,"height":792},
		{"id":"ce9a180332abed35","type":"text","text":"### Tuple\n\nКортеж (tuple) - незименяемая упорядоченная коллекция в Python\n\n`print(t1 + t2)`\n\n- Кортеж может содержать изменяемые элементы, но сам всё равно счтается неизменяемым\n- Немного быстрее списков при итерировании\n- Реализует `__hash__`, но не хэшируем, если содержит изменяемые элементы\n- Применяется в качестве элементов множества / ключей словаря","x":-2880,"y":-732,"width":810,"height":772},
		{"id":"6aea982c069e0a85","type":"text","text":"### Set (HashSet)\n\n- **Хэш-таблица** с **открытой адресацией** (open adressing) и **линейным пробингом** (linear probing)\n- Хранит **только ключи** (значение фиктивное)\n\n```python\ns = set()\ns = {1, 4, 9, 16}\n```","x":-880,"y":-788,"width":560,"height":328},
		{"id":"ec8cfa4201a8381c","type":"text","text":"### Dict (HashMap)\n- **Хэш-таблица** с **открытой адресацией** (open adressing) и **линейным пробингом** (linear probing)\n- Хранит **ключи и значения**\n\n```python\nd = {}\nd = {1: 1, 2: 4, 3: 9, 4: 16}\n```","x":-280,"y":-788,"width":590,"height":328},
		{"id":"da92375ab5ddd86b","x":-780,"y":-380,"width":880,"height":700,"type":"text","text":"### Имплементация\n\n1\\. **Общая идея**\nОбе структуры используют массив ячеек (**slots**), где каждая ячейка содержит:\n- хэш ключа (закэшированный, чтобы не пересчитывать)\n- сам ключ (и значение для dict)\n- состояние (пустая, удалённая, занятая)\n\nПо хэшу находим индекс: `index = hash(key) & (table_size - 1)`\n! table_size - степень двойки, так что остаток от деления берётся через побитовую операцию\n\n2\\. **Разрешение коллизий**\n- Используется open adressing с perturbation - линейное + квадратичное пробирование с дополнительной перемешивающей переменной, чтобы уменьшить clustering\n- При поиске свободного места формула:\n```c\ni = hash & mask\nperturb = hash\nwhile slot[i]\n```\n"}
	],
	"edges":[
		{"id":"dd850a81b9e6daa7","fromNode":"f9ded7ac3a07b0d4","fromSide":"bottom","toNode":"3ab0bcbe9839b995","toSide":"top"},
		{"id":"098d84229e48f818","fromNode":"30c41d80592b44e8","fromSide":"bottom","toNode":"79f1928828b930cd","toSide":"top"},
		{"id":"096556ad1644f39b","fromNode":"6aa690f2b524dda5","fromSide":"right","toNode":"4d3f2c23eedb59ef","toSide":"left","toEnd":"none"},
		{"id":"275fbd97efa4c415","fromNode":"cf14f2fa1bb1d26b","fromSide":"bottom","toNode":"41ba00db0b6cc136","toSide":"top"},
		{"id":"23545b1b1dd3f0f4","fromNode":"6aea982c069e0a85","fromSide":"bottom","toNode":"da92375ab5ddd86b","toSide":"top"},
		{"id":"eab2842bbaa6d22b","fromNode":"ec8cfa4201a8381c","fromSide":"bottom","toNode":"da92375ab5ddd86b","toSide":"top"}
	]
}